<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Vorder: Trading Crypto with Voice</title>

    <!-- Bootstrap core CSS -->
    <link href="<%= static_path + "/bootstrap/css/theme/" + theme + "/bootstrap.css" %>" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="<%= static_path + "/bootstrap/css/jumbotron-narrow.css" %>" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">

    <script src="https://www.WebRTC-Experiment.com/RecordRTC.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io-stream/0.9.1/socket.io-stream.js"></script>

  </head>

  <body>

    <div class="container">
      <div class="header">
        <h3 class="text-muted">Vorder</h3>
      </div>
	  <% if (flask_debug === 'true') { %>
      <div class="alert alert-danger">
      	Flask is in debug mode. This is not safe for production.
      </div>
      <% } %>
      <div id="signupSuccess" class="alert alert-success" style="display:none">
        <p id="signupSuccessText">Thanks for signing up! You'll be among the first to know when we launch.</p>
      </div>
      <div id="signupDuplicate" class="alert alert-success" style="display:none">
        <p id="signupDuplicateText">Fear not, you're already on the list! You'll be among the first to know when we launch.</p>
      </div>
      <div id="signupError" class="alert alert-info" style="display:none">
        <p id="signupErrorText">Well this is embarrassing. It looks like we're having trouble getting you on the list.</p>
      </div>
      <div class="jumbotron">
        <h1>Trading Crypto with Voice</h1>
        <p class="lead">Click the "Start" button below to try.</p>
        <div>
          <button id="start-recording" disabled>Start</button>
          <button id="stop-recording" disabled>Stop</button>
        </div>

        <h2 style="font-size: 14px;">Results: data[0].results[0].alternatives[0].transcript</h2>
        <textarea id="results" style="width: 800px; height: 300px;"></textarea>
      </div>


      <div class="footer">
        <p>&copy; Vorder 2021</p>
      </div>

    </div> <!-- /container -->

    <script src="<%= static_path + "/jquery/jquery-1.11.3.min.js" %>"></script>
    <script src="<%= static_path + "/bootstrap/js/bootstrap.min.js" %>"></script>


    <script type="text/javascript">
    $(document).ready(function() {
      $("#signup").click(function() {
        $.post( "/signup", $("#signupForm").serialize(),
                function(data) {
                  $("#signupSuccess").show();
                }
              )
              .error(function(xhr) {
                switch(xhr.status) {
                  case 409:
                    $("#signupDuplicate").show();
                    break;
                  default:
                    $("#signupError").show();
                }
              })
              .always(function() {
                $("#signupModal").modal('hide');
              });
      })
    })
    </script>

    <script type="text/javascript">

        const socketio = io();
        const socket = socketio.on('connect', function() {
            // reset the recorder
            startRecording.disabled = false;
        });

        // when the server found results send
        // it back to the client
        const resultpreview = document.getElementById('results');
        socketio.on('results', function (data) {
            // show the results on the screen
            if(data[0] && data[0].results[0] && data[0].results[0].alternatives[0]){
                resultpreview.innerHTML += "" + data[0].results[0].alternatives[0].transcript;
            }
        });

        const startRecording = document.getElementById('start-recording');
        const stopRecording = document.getElementById('stop-recording');
        let recordAudio;

        //DEBUG
        /*
        startRecording.onclick = function() {
            var message = 'just checking if this is received';
            // submit message to server
            socketio.emit('debug', message);

        };
        */
        //DEBUG

        // on start button handler
        startRecording.onclick = function() {
            // recording started
            startRecording.disabled = true;

            // let the server know that we started recording
            socketio.emit('start-recording', Date.now());

            // make use of HTML 5/WebRTC, JavaScript getUserMedia()
            // to capture the browser microphone stream
            navigator.getUserMedia({
                audio: true
            }, function(stream) {
                    recordAudio = RecordRTC(stream, {
                    type: 'audio',
                    mimeType: 'audio/webm',
                    sampleRate: 16000, // this sampleRate should be the same in your server code

                    // MediaStreamRecorder, StereoAudioRecorder, WebAssemblyRecorder
                    // CanvasRecorder, GifRecorder, WhammyRecorder
                    recorderType: StereoAudioRecorder,

                    // Dialogflow / STT requires mono audio
                    numberOfAudioChannels: 1,

                    // get intervals based blobs
                    // value in milliseconds
                    // as you might not want to make detect calls every seconds
                    timeSlice: 4000,

                    // only for audio track
                    // audioBitsPerSecond: 128000,

                    // used by StereoAudioRecorder
                    // the range 22050 to 96000.
                    // let us force 16khz recording:
                    desiredSampRate: 16000
                });

                recordAudio.startRecording();
                stopRecording.disabled = false;
            }, function(error) {
                console.error(JSON.stringify(error));
            });

        };

        // on stop button handler
        stopRecording.onclick = function() {
            // recording stopped
            startRecording.disabled = false;
            stopRecording.disabled = true;

            // stop audio recorder
            recordAudio.stopRecording(function() {

                // after stopping the audio, get the audio data
                recordAudio.getDataURL(function(audioDataURL) {
                    var files = {
                        audio: {
                            type: recordAudio.getBlob().type || 'audio/wav',
                            dataURL: audioDataURL
                        },

                        timestamp: Date.now()
                    };

                    // submit the audio file to the server
                    socketio.emit('message-transcribe', files);
                });
            });
        };
    </script>

  </body>
</html>
